#!/usr/bin/env ruby
require 'yaml'
require 'erb'
require 'find'
require 'ostruct'
require 'fileutils'
require 'pp'

@root      = File.dirname(File.dirname(__FILE__))
@templates = "#{@root}/templates"
@profiles  = "#{@root}/profiles"

begin
  require 'rubygems'
  require 'rmagick'

  def convert(color, from_profile, to_profile)
    img = Magick::Image.new(1,1)
    img.store_pixels(0,0,1,1,[Magick::Pixel.from_color(color)])
    img.add_profile("#{@profiles}/#{from_profile}.icc")
    img.add_profile("#{@profiles}/#{to_profile}.icc")
    img.pixel_color(0,0).to_color(Magick::AllCompliance, false, 8)
  end
rescue LoadError => e
  puts "Warning: Cannot find RMagick\n  unable to convert colors from sRGB, so colors won't be correct in all Apps."

  def convert(color, from_profile, to_profile)
    color
  end
end

def struct(hash)
  keys = []
  vals = []
  hash.each do |k,v|
    keys << k.to_sym
    vals << (block_given? ? yield(v) : v)
  end
  Struct.new(*keys).new(*vals)
end

CODE = {
  :comment  => "secondary",
  :function => "violet",
  :builtin  => "blue",
  :datatype => "green",
  :variable => "orange",
  :string   => "cyan",
  :constant => "yellow",
  :keyword  => "emphasis",
  :warning  => "red",
  :preproc  => "magenta",
}

@theme_file = ARGV.first
@theme_name = File.basename(@theme_file, '.yml')
@theme_dir  = File.dirname(@theme_file) + "/#{@theme_name}"
@theme      = YAML::load_file(@theme_file)
@code       = struct(CODE.merge(@theme.delete("code") || {}))
@srgb       = struct(@theme)
@rgb        = struct(@theme) {|c| convert(c, :srgb, :generic_rgb)}
@lab        = struct(@theme) {|c| convert(c, :srgb, :generic_lab)}

def generate_file(template)
  file = template.gsub(@templates, @theme_dir).gsub('colorized', @theme_name)
  dir  = File.dirname(file)
  FileUtils.mkdir_p(dir) unless File.exists?(dir)
  puts "#{template}\t-> #{file}"
  File.open(file, 'w') do |f|
    f.write ERB.new(IO.read(template)).result(binding)
  end
end

Find.find(@templates) do |template|
  next if File.directory?(template)
  generate_file(template)
end
