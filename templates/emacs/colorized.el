;;; <%=@theme_name%> color theme
;;; generated by colorized (http://github.com/ninjudd/colorized)

(eval-when-compile
  (require 'color-theme))

(defvar base03 "<%= @rgb.base03 %>")
(defvar base02 "<%= @rgb.base02 %>")
(defvar base01 "<%= @rgb.base01 %>")
(defvar base00 "<%= @rgb.base00 %>")
(defvar base0  "<%= @rgb.base0  %>")
(defvar base1  "<%= @rgb.base1  %>")
(defvar base2  "<%= @rgb.base2  %>")
(defvar base3  "<%= @rgb.base3  %>")

(defvar yellow  "<%= @rgb.yellow  %>")
(defvar orange  "<%= @rgb.orange  %>")
(defvar red     "<%= @rgb.red     %>")
(defvar magenta "<%= @rgb.magenta %>")
(defvar violet  "<%= @rgb.violet  %>")
(defvar blue    "<%= @rgb.blue    %>")
(defvar cyan    "<%= @rgb.cyan    %>")
(defvar green   "<%= @rgb.green   %>")

;;;###autoload
(defun color-theme-<%=@theme_name%> (light?)
  "Colorized theme: <%=@theme_name%>"
  (let ((emphasis   (if light? base01 base1 ))
        (primary    (if light? base00 base0 ))
        (secondary  (if light? base1  base01))
        (highlight  (if light? base2  base02))
        (background (if light? base3  base03)))
    (let ((comment    <%=@code.comment%>)
          (constant   <%=@code.constant%>)
          (function   <%=@code.function%>)
          (builtin    <%=@code.builtin%>)
          (datatype   <%=@code.datatype%>)
          (variable   <%=@code.variable%>)
          (string     <%=@code.string%>)
          (keyword    <%=@code.keyword%>)
          (warning    <%=@code.warning%>)
          (warning    <%=@code.warning%>)
          (preproc    <%=@code.preproc%>))
      (color-theme-install
       `(color-theme-<%=@theme_name%>
         ((foreground-color . ,primary)
          (background-color . ,background)
          (background-mode . ,(if light? 'light 'dark))
          (cursor-color . ,secondary))
         ;; basic
         (default             ((t (:foreground ,primary))))
         (escape-glyph-face   ((t (:foreground ,red))))
         (fringe              ((t (:foreground ,secondary :background ,highlight))))
         (header-line         ((t (:foreground ,primary   :background ,highlight))))
         (highlight           ((t (:background ,highlight))))
         (isearch             ((t (:foreground ,background :background ,yellow))))
         (isearch-fail        ((t (:foreground ,background :background ,red))))
         (lazy-highlight      ((t (:foreground ,background :background ,secondary))))
         (menu                ((t (:foreground ,primary    :background ,highlight))))
         (minibuffer-prompt   ((t (:foreground ,blue))))
         (mode-line           ((t (:foreground ,primary :background ,highlight))))
         (mode-line-inactive  ((t (:foreground ,secondary :background ,highlight))))
         (mode-line-buffer-id ((t (:foreground ,primary))))
         (region              ((t (:background ,secondary :foreground ,background))))
         (secondary-selection ((t (:background ,base02))))
         (trailing-whitespace ((t (:foreground ,red :inverse-video t))))
         (vertical-border     ((t (:foreground ,base0))))
         ;; diff
         (diff-added         ((t (:foreground ,green :inverse-video t))))
         (diff-changed       ((t (:foreground ,yellow :inverse-video t))))
         (diff-removed       ((t (:foreground ,red :inverse-video t))))
         (diff-header        ((t (:background ,base01))))
         (diff-file-header   ((t (:background ,base1 :foreground ,base01 :bold t))))
         (diff-refine-change ((t (:background ,base1))))
         ;; font-lock
         (font-lock-builtin-face       ((t (:foreground ,builtin :bold t))))
         (font-lock-comment-face       ((t (:foreground ,comment :italic t))))
         (font-lock-constant-face      ((t (:foreground ,constant))))
         (font-lock-function-name-face ((t (:foreground ,function))))
         (font-lock-keyword-face       ((t (:foreground ,keyword :bold t))))
         (font-lock-string-face        ((t (:foreground ,string))))
         (font-lock-type-face          ((t (:foreground ,datatype))))
         (font-lock-variable-name-face ((t (:foreground ,variable))))
         (font-lock-warning-face       ((t (:foreground ,warning))))
         (font-lock-doc-face           ((t (:foreground ,comment :italic t))))
         ;; tabbar
         (tabbar-default    ((t (:background ,secondary))))
         (tabbar-unselected ((t (:background ,secondary :foreground ,background :box nil))))
         (tabbar-selected   ((t (:background ,background :foreground ,secondary :box nil))))
         (tabbar-highlight  ((t (:underline t))))
         ;; erc
         (erc-default-face      ((t (:foreground ,primary))))
         (erc-timestamp-face    ((t (:foreground ,secondary :bold nil))))
         (erc-notice-face       ((t (:foreground ,secondary :bold nil))))
         (erc-input-face        ((t (:foreground nil :background ,highlight))))
         (erc-prompt-face       ((t (:foreground ,secondary :background ,background))))
         (erc-current-nick-face ((t (:foreground ,cyan :bold t))))
         (erc-my-nick-face      ((t (:foreground ,cyan :bold t))))
         ;; jabber
         (jabber-title-large         ((t (:foreground ,primary :bold t))))
         (jabber-title-medium        ((t (:foreground ,primary :bold t))))
         (jabber-title-small         ((t (:foreground ,primary :bold t))))
         (jabber-chat-prompt-local   ((t (:foreground ,cyan   :bold t))))
         (jabber-chat-prompt-foreign ((t (:foreground ,yellow :bold t))))
         (jabber-rare-time-face      ((t (:foreground ,green))))
         (jabber-roster-user-online  ((t (:foreground ,yellow))))
         (jabber-roster-user-away    ((t (:foreground ,red))))
         (jabber-roster-user-offline ((t (:foreground ,secondary))))
         ;; show-paren
         (show-paren-match    ((t (:background ,highlight))))
         (show-paren-mismatch ((t (:background ,red)))))))))

(add-to-list 'color-themes
             '(color-theme-<%=@theme_name%>
               "<%=@theme_name%> colorized"
               "http://github.com/ninjudd/colorized"))

(provide 'color-theme-<%=@theme_name%>)
